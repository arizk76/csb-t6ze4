{"version":3,"sources":["userSelectionOptionsList.js","TestClassComp.jsx","TestFuncComp.jsx","App.js","index.js"],"names":["userSelectionOptions","id","name","selected","initialSelectionList","TestClassComp","props","state","selectionList","onlySelectedList","handleSelection","bind","evt","optionName","target","value","optionSelectionStatus","checked","updatedSelectionList","this","updatedOnlySelectedList","forEach","item","filter","setState","className","map","type","onChange","option","Component","TestFuncComp","useState","setSelectionList","setOnlySelectedList","handleChecked","selectedOptionName","selectedOptionStatus","App","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.144f472a.chunk.js","sourcesContent":["export const userSelectionOptions = [\r\n  {\r\n    id: 1,\r\n    name: \"option1\",\r\n    selected: false\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"option2\",\r\n    selected: false\r\n  },\r\n  {\r\n    id: 3,\r\n    name: \"option3\",\r\n    selected: false\r\n  },\r\n  {\r\n    id: 4,\r\n    name: \"option4\",\r\n    selected: false\r\n  },\r\n  {\r\n    id: 5,\r\n    name: \"option5\",\r\n    selected: false\r\n  },\r\n  {\r\n    id: 6,\r\n    name: \"option6\",\r\n    selected: false\r\n  }\r\n];\r\n","import React, { Component } from \"react\";\r\nimport { userSelectionOptions } from \"./userSelectionOptionsList\";\r\n\r\nconst initialSelectionList = [...userSelectionOptions];\r\n\r\nexport default class TestClassComp extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      selectionList: initialSelectionList,\r\n      onlySelectedList: []\r\n    };\r\n    this.handleSelection = this.handleSelection.bind(this);\r\n  }\r\n\r\n  handleSelection(evt) {\r\n    const optionName = evt.target.value;\r\n    const optionSelectionStatus = evt.target.checked;\r\n\r\n    const updatedSelectionList = [...this.state.selectionList];\r\n    let updatedOnlySelectedList = [];\r\n\r\n    updatedSelectionList.forEach((item) => {\r\n      if (item.name === optionName) {\r\n        item.selected = optionSelectionStatus;\r\n      }\r\n      updatedOnlySelectedList = updatedSelectionList.filter(\r\n        (item) => item.selected === true\r\n      );\r\n      this.setState({\r\n        selectionList: updatedSelectionList\r\n      });\r\n      this.setState({\r\n        onlySelectedList: updatedOnlySelectedList\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p className=\"text\">\r\n          User should select from options list, Selection list will be updated\r\n          using useState() hook for function component and setState() for class\r\n          component, and only selected options will be updated and rendered\r\n          below.\r\n        </p>\r\n        <h1 className=\"title\">\r\n          Test scenario 1 <span> Class component</span>\r\n        </h1>\r\n        <code>USING : (this.state) & (this.setState()) </code>\r\n        <h3>User Selection Options</h3>\r\n        <div className=\"selection-options\">\r\n          {this.state.selectionList.map((item) => (\r\n            <label key={item.id}>\r\n              {item.name}\r\n              <input\r\n                type=\"checkbox\"\r\n                name={item.name}\r\n                value={item.name}\r\n                onChange={(evt) => this.handleSelection(evt)}\r\n              />\r\n            </label>\r\n          ))}\r\n        </div>\r\n        <br />\r\n        <h3>Only Selected List</h3>\r\n        <div className=\"only-selected\">\r\n          <ul>\r\n            {this.state.onlySelectedList.map((option) => (\r\n              <li key={option.id}>{option.name}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { useState } from \"react\";\nimport { userSelectionOptions } from \"./userSelectionOptionsList\";\n\nfunction TestFuncComp() {\n  const initialSelectionList = [...userSelectionOptions];\n\n  const [selectionList, setSelectionList] = useState(initialSelectionList);\n  const [onlySelectedList, setOnlySelectedList] = useState([]);\n\n  const handleChecked = (evt) => {\n    const selectedOptionName = evt.target.value;\n    const selectedOptionStatus = evt.target.checked;\n\n    const updatedSelectionList = [...selectionList];\n    let updatedOnlySelectedList = [];\n    updatedSelectionList.forEach((item) => {\n      if (item.name === selectedOptionName) {\n        item.selected = selectedOptionStatus;\n      }\n    });\n    updatedOnlySelectedList = updatedSelectionList.filter(\n      (item) => item.selected === true\n    );\n\n    setSelectionList(updatedSelectionList);\n    setOnlySelectedList(updatedOnlySelectedList);\n  };\n\n  return (\n    <div>\n      <h1 className=\"title\">\n        Test scenario 2 <span> Function component</span>\n      </h1>\n      <code>USING: </code>\n      <code>useState() Hook </code>\n      <h3>User Selection Options</h3>\n      <div className=\"selection-options\">\n        {selectionList.map((item) => (\n          <label key={item.id}>\n            {item.name}\n            <input\n              type=\"checkbox\"\n              name={item.name}\n              value={item.name}\n              onChange={handleChecked}\n            />\n          </label>\n        ))}\n      </div>\n      <br />\n      <h3>Only Selected List</h3>\n      <div className=\"only-selected\">\n        <ul>\n          {onlySelectedList.map((option) => (\n            <li key={option.id}>{option.name}</li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default TestFuncComp;\n","import \"./styles.css\";\nimport TestClassComp from \"./TestClassComp\";\nimport TestFuncComp from \"./TestFuncComp\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <TestClassComp />\n      <TestFuncComp />\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}